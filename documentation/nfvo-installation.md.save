# Install NFVO

The NFVO is implemented in java using the [spring.io] framework. For more details about the NFVO architecture, you can refer to the extend it section.

## install the latest NFVO version from the source code

The NFVO can be installed using different mechanisms. In this how to we will show you how to instantiate it using directly from the git repo. 

The NFVO uses the Java Messaging System for communicating with the VNFMs. Therefore it is a prerequisites to have ActiveMQ up and running. To facilitate the installation procedures we provide an installation script which can be used for installing the NFVO and the prerequired libraries. Considering that this script needs to install some system libraries, it is required to execute it as super user. To execute the following command you need to have curl installed (see http://curl.haxx.se/). 

```bash
sudo su -
curl -fsSkL https://raw.githubusercontent.com/openbaton/bootstrap/master/openbaton.sh |bash
```

At the end of the installation procedure, if there are no errors, the screen session of the nfvo will show up. Moreover the dashboard is reachable at: [localhost:8080]. At the end of the installation, you should have the following structure: 
```bash
/opt/openbaton/
├── apache-activemq-5.11.1
├── generic-vnfm
└── nfvo
```

where:
  
* `apache-activemq-5.11.1` contains the activeMQ software (it is basically downloaded, extracted and executed)  
* `generic-vnfm`contains the source code and scripts required for dealing with the generic-vnfm  
* `nfvo` contains the source code and scripts of the NFVO 

The NFVO is configured with default configuration parameters at the beginning. The configuration file is located on 

```bash
/etc/openbaton/openbaton.properties
```

This file can be modified for specific parameters. For instance, you can decide to change logging levels and mechanisms:
```properties
logging.level.org.springframework=INFO
logging.level.org.hibernate=INFO
logging.level.org.jclouds=WARN
logging.level.org.springframework.security=WARN
# Level for loggers on classes inside the root package "org.project.openbaton" (and its
# sub-packages)
logging.level.org.openbaton.nfvo=INFO
# Direct log to a log file
logging.file=/var/log/openbaton.log
```
Or parameters related with persistency (hibernate):
```properties
# DB properties
spring.datasource.username=admin
spring.datasource.password=changeme
# hsql jdbc
spring.datasource.url=jdbc:hsqldb:file:/tmp/openbaton/openbaton.hsdb
spring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver
spring.jpa.database-platform=org.hibernate.dialect.HSQLDialect
# mysql jdbc
#spring.datasource.url=jdbc:mysql://localhost:3306/openbaton
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# hibernate properties
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=create-drop
```
By deafault ActiveMQ is installed on the host of the NFVO. Be aware of the fact that if you want your VNFM to be executed on a different host, you will need that ActiveMQ is reachable also from the extern.  
**Note:** when you want to deploy a VNF (EMS) in a VM which runs on a different host respect to the NFVO, you will need to configure the activemq endpoint (spring.activemq.broker-url) with the real IP of the NFVO host (instead of localhost).
```properties
# activeMQ
spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin
```

These parameters rapresent the file size of the VNF Package which can be uploaded to the NFVO
```properties
# filesUpload
multipart.maxFileSize=2046MB
multipart.maxRequestSize=2046MB
```

The following properties are related to the plugin mechanism used for loading VIM and Monitoring instances. The `vim-plugin-installation-dir` is the directory where all the jar files are, which implement the VIM interface (see the [vim_plugin_doc][]). The NFVO will load them at runtime.  
```properties
# plugin install
# directory for the vim driver plugins
vim-plugin-installation-dir = ./plugins/vim-drivers
# classes contained in the jar files to be loaded
vim-classes=org.project.openbaton.clients.interfaces.client.test.TestClient;org.project.openbaton.clients.interfaces.client.openstack.OpenstackClient
# directory for the monitoring plugin
monitoring-plugin-installation-dir = ./plugins/monitoring
# classes contained in the jar files to be loaded
monitoring-classes=org.project.openbaton.monitoring.agent.SmartDummyMonitoringAgent
# nfvo behaviour
delete-on-all-status = false
```

Those properties are needed in case you want to tune a bit the performances of the NFVO
```properties
# Thread pool executor configuration
# for info see http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.html
vmanager-executor-core-pool-size = 20
vmanager-executor-max-pool-size = 25
vmanager-executor-queue-capacity = 500
vmanager-keep-alive = 30
```

Whenever some of those parameters are changed, you will need to restart the orchestrator. This can be done with the following command: 
```bash 
cd /opt/openbaton/nfvo
./openbaton.sh restart
```

At this point the NFVO is ready to be used. Please refer to the NFVO user guide for how to start using it. 

## Let's move to the next step

Dependening on the approach used for deploying your VNF, you'll have either to install the generic-VNFM or install and register your own VNFM
 
[spring.io]:https://spring.io/
[localhost:8080]:http://localhost:8080/
[vim_plugin_doc]:
